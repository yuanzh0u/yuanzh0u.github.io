<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yuanzh0u.github.io</id>
    <title>yuanZh0u</title>
    <updated>2020-02-20T10:50:22.202Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yuanzh0u.github.io"/>
    <link rel="self" href="https://yuanzh0u.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://yuanzh0u.github.io/images/avatar.png</logo>
    <icon>https://yuanzh0u.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, yuanZh0u</rights>
    <entry>
        <title type="html"><![CDATA[Day#2 Modify Electron Initial Setup for Vue.js Development]]></title>
        <id>https://yuanzh0u.github.io/post/day2-modify-electron-initial-setup/</id>
        <link href="https://yuanzh0u.github.io/post/day2-modify-electron-initial-setup/">
        </link>
        <updated>2020-02-20T08:12:59.000Z</updated>
        <content type="html"><![CDATA[<h2 id="remove-the-menu-bar">Remove the Menu Bar</h2>
<p>When the project is setup by the <code>electron-builder</code> (a vue plugin), the initial settings of the electron window layout was put into the <code>background.js</code> at the root of the project folder.<br>
The main window of the app is given to an object named <code>win</code> at <code>line 19</code> by declearing an instance of BrowserWindow in the function of <code>createWindow(){}</code>.</p>
<pre><code class="language-javascript">function createWindow() { 
    win = new BrowserWindow({ width: 800, height: 600, webPreferences: {
        nodeIntegration: true
    } })
</code></pre>
<p>where <code>width</code> and <code>height</code> are the size of the window to be rendered, <code>webPreferences</code> is an object that most of the interactive properties of the window are setup.<br>
The line 23 to line 31 is a <code>if</code> statement that will decide where to load and how to render the window during the development mode and build mode.<br>
During the development mode, the dev tool float window will be opened just like in a chrome browser.<br>
Between line 21 and 23, we will add a line to disable the system menu bar from the window, so that we will add a more OS consistent menu bar in our app.</p>
<pre><code class="language-javascript">win.setMenu(null);
</code></pre>
<h2 id="add-vue-dev-tools-to-the-dev-tools-of-electron">Add Vue Dev-tools to the dev-tools of Electron</h2>
<p>The vue dev-tools is an chromium plugin which gives more structral and intuitive insight of the vue.js framework rather than other dev-tools consoles with plain javascript. Go to the root folder of the project in the terminal and type the following command to install the vue-devtools package to the <code>node_modules</code></p>
<pre><code class="language-shell">npm install vue-devtools --save-dev
</code></pre>
<p>and some scripts also need to be added to the <code>background.js</code> so that when the main window is rendered, the vue-devtools will be installed to the dev-tools of the chromium.<br>
The scripts will be add to the callback function in <code>add.on('ready', function(){})</code> as follows:</p>
<pre><code class="language-javascript">app.on('ready', async () =&gt; {
  if (isDevelopment &amp;&amp; !process.env.IS_TEST) {
    // Install Vue Devtools
    // Devtools extensions are broken in Electron 6.0.0 and greater
    // See https://github.com/nklayman/vue-cli-plugin-electron-builder/issues/378 for more info
    // Electron will not launch with Devtools extensions installed on Windows 10 with dark mode
    // If you are not using Windows 10 dark mode, you may uncomment these lines
    // In addition, if the linked issue is closed, you can upgrade electron and uncomment these lines
    // try {
    //   await installVueDevtools()
    // } catch (e) {
    //   console.error('Vue Devtools failed to install:', e.toString())
    // }
  }
  // new code start --&gt;
  if (process.env.NODE_ENV !== 'production') {
    BrowserWindow.addDevToolsExtension('node_modules/vue-devtools/vender')
  }
  // new code ends &lt;--
  createWindow()
})
</code></pre>
<p>Then use command <code>npm run electron:serve</code> at the root folder of the project in the terminal. After the codes are compiled successfully, a window will popup with vue-devtools in the dev-tools section.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tutorial List for Beginners]]></title>
        <id>https://yuanzh0u.github.io/post/tutorial-list-for-beginners/</id>
        <link href="https://yuanzh0u.github.io/post/tutorial-list-for-beginners/">
        </link>
        <updated>2020-02-20T02:37:21.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>学会一门编程语言之   <a href="https://www.bilibili.com/video/av46230772?from=search&amp;seid=11943480974581181"><code>Javascript基础</code> </a></li>
<li>了解数据结构是什么   <a href="https://www.bilibili.com/video/av82049466?from=search&amp;seid=11943480974581181"><code>数据结构与算法入门</code></a></li>
<li>语言的应用进阶篇<a href="https://www.bilibili.com/video/av87391436?from=search&amp;seid=11943480974581181"><code>Python与网络APP及机器学习APP</code></a></li>
<li>数据库是干什么的<a href="https://www.bilibili.com/video/av47123168?from=search&amp;seid=11943480974581181"><code>初探SQL</code></a></li>
<li>学习用Node.js进行一次完整的网络APP开发<a href="https://www.bilibili.com/video/av38914382?from=search&amp;seid=11943480974581181"><code>Node.js全教程</code></a></li>
<li>WebGL三维建模基础库Three.js<a href="https://threejsfundamentals.org/threejs/lessons/threejs-fundamentals.html"><code>Three.js Fundamentals</code></a></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day#1 electron_vue installation]]></title>
        <id>https://yuanzh0u.github.io/post/day1-electron_vue-installation/</id>
        <link href="https://yuanzh0u.github.io/post/day1-electron_vue-installation/">
        </link>
        <updated>2020-02-19T13:50:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="install-nodejs">install node.js</h2>
<p>Go to the Node.js <a href="https://nodejs.org/en/download/">download</a> page. Download and Install the Current(Latest Features) 13.6.0 with npm (v.6.13.4). During the installation, select options such as <code>Node.js runtime</code>, <code>npm package manager</code>, <code>Add to PATH</code></p>
<h2 id="install-vue-cli-3">install vue cli 3</h2>
<p>Install vue cli 3 with a terminal console. cd to the root folder of the project and type the command...</p>
<pre><code class="language-shell">npm install -g @vue/cli
</code></pre>
<p>By which will install the source files of vue to the system, and ect.</p>
<h2 id="create-a-new-project">create a new project</h2>
<p>To create a new project underthe root folder of the project, type the command in a terminal console...</p>
<pre><code class="language-shell">vue create [project name]
</code></pre>
<p>and select the following options when asking...</p>
<pre><code class="language-shell">? Please pick a preset: {Manually select features}
? Check the features needed for your project: {Babel, Router, Vuex, Linter}
? Use history mode for router? (Requires proper server setup for index fallback in production) {Yes}
? Pick a linter / formatter config: {Basic}
? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection {Lint on save}
? Where do you prefer placing config for Babel, ESLint, etc.? { In dedicated config files}
? Save this as a preset for future projects? {No}
</code></pre>
<h2 id="install-electron-support">Install electron support</h2>
<p>CD to the project folder in the terminal console, and type the command...</p>
<pre><code class="language-shell">vue add electron-builder
</code></pre>
<p>When asking the version of electron to install, select the newest one.<br>
After the vue-cli-plugin-electron-builder is successfully installed, you could type <code>npm run electron:serve</code> to render the electron app in dev-mode, and type <code>npm run electron:build</code> to build and publish the electron app.</p>
]]></content>
    </entry>
</feed>