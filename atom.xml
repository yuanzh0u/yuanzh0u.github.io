<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yuanzh0u.github.io</id>
    <title>yuanZh0u</title>
    <updated>2020-02-22T16:05:23.769Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yuanzh0u.github.io"/>
    <link rel="self" href="https://yuanzh0u.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://yuanzh0u.github.io/images/avatar.png</logo>
    <icon>https://yuanzh0u.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, yuanZh0u</rights>
    <entry>
        <title type="html"><![CDATA[Day#4 Initial File Structure part 2]]></title>
        <id>https://yuanzh0u.github.io/post/day4-initial-file-structure-part-2/</id>
        <link href="https://yuanzh0u.github.io/post/day4-initial-file-structure-part-2/">
        </link>
        <updated>2020-02-22T04:58:48.000Z</updated>
        <summary type="html"><![CDATA[<p>In the previous blog, it explained the contributes of <code>electron_vue</code> to the inital app, and discussed the functionality of four resource code files, <code>background.js</code>, <code>index.html</code>, <code>main.js</code> and <code>App.vue</code>. Now, let's take a look at the stories of the rest of the file structure built in advance,  the <strong>six folders</strong>: <code>assets</code>, <code>components</code>, <code>plugins</code>, <code>router</code>, <code>store</code> and <code>view</code>.</p>
]]></summary>
        <content type="html"><![CDATA[<p>In the previous blog, it explained the contributes of <code>electron_vue</code> to the inital app, and discussed the functionality of four resource code files, <code>background.js</code>, <code>index.html</code>, <code>main.js</code> and <code>App.vue</code>. Now, let's take a look at the stories of the rest of the file structure built in advance,  the <strong>six folders</strong>: <code>assets</code>, <code>components</code>, <code>plugins</code>, <code>router</code>, <code>store</code> and <code>view</code>.</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/yuanzh0u/Imgbed_picgo/master/20200221161119.png" alt="Initial File Structure" loading="lazy"></figure>
<h2 id="1-assets">1. <code>assets</code></h2>
<p>The <code>assets</code> folder is where to place the <strong>&quot;static resource&quot;</strong> of your project, such as icons, images, json files, and etc.</p>
<h2 id="2-components-and-view">2. <code>components</code> and <code>view</code></h2>
<p>The <code>components</code> and <code>view</code> folders are where to contain <code>.vue</code> files, a.k.a the <strong><a href="https://vuejs.org/v2/guide/#Composing-with-Components">VUE components</a></strong>. The key difference is that some VUE components act as Views for routing with <strong><a href="https://vuejs.org/v2/guide/routing.html">VUE Router</a></strong> . The components located under <code>src/components</code> are less likely to be used in a route whereas components located under <code>src/views</code> will be used by  at least one route.</p>
<h2 id="3-plugins">3. <code>plugins</code></h2>
<p>The <code>src/plugins/</code> folder is straight forward. It imports the plugins used in the project and registers them to the <code>Vue</code> instance decleared in the <code>main.js</code> with a <code>.js</code> file.</p>
<pre><code class="language-javascript">// this is the file generate automatically 
//if you install the vuetify plugin to the project
import Vue from 'vue';
import Vuetify from 'vuetify/lib';// import Vuetify plugin

Vue.use(Vuetify);// registers the Vuetify to Vue instance declear in the main.js

export default new Vuetify({
});
</code></pre>
<h2 id="4-router">4. <code>router</code></h2>
<p>The <code>src/router/</code> folder is where to places the <code>.js</code> file that registers the <code>VueRouter</code> plugin to the <code>Vue</code> instance and view components to the corresponding urls. This plugin is not alway nessesary, especially during the development of a SPA (Single Page Application) project.</p>
<h2 id="5-store">5. <code>store</code></h2>
<p>The <code>src/store/</code> folder is where to places the <code>.js</code> file that registers the <code>Vuex</code> plugin to the <code>Vue</code> instance and store the data or functions that could be interacted with all the components you build in the vue framework.</p>
<p>More details of <code>router</code> and <code>store</code> will be elaborate in the following blogs when we dig deeper in this &quot;DEV&quot; project.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day#3 Initial File Structure part 1]]></title>
        <id>https://yuanzh0u.github.io/post/day3-electron_vue-startup/</id>
        <link href="https://yuanzh0u.github.io/post/day3-electron_vue-startup/">
        </link>
        <updated>2020-02-21T01:50:27.000Z</updated>
        <summary type="html"><![CDATA[<p>This part will discuss the file structure that initialized by the <code>vue.js</code> and <code>electron_vue</code> plugin, and explain how the <code>electron_vue</code> bundles the <code>electron</code>, <code>html</code>, <code>javascript</code> and <code>vue.js</code> and let them working together.</p>
]]></summary>
        <content type="html"><![CDATA[<p>This part will discuss the file structure that initialized by the <code>vue.js</code> and <code>electron_vue</code> plugin, and explain how the <code>electron_vue</code> bundles the <code>electron</code>, <code>html</code>, <code>javascript</code> and <code>vue.js</code> and let them working together.</p>
<!-- more -->
<p><img src="https://raw.githubusercontent.com/yuanzh0u/Imgbed_picgo/master/20200221153559.png" alt="initial file structure after electron_vue is setup" loading="lazy"><br>
After the project is initialized by the electron_vue and vuetify, the project folder would be looked like the above picture. Everthing you need for coding is stored in the folder named <code>src</code> as short for &quot;source code&quot;. The rest files and folders are used for compiling and buiding stuff, which will be discussed later.<br>
<img src="https://raw.githubusercontent.com/yuanzh0u/Imgbed_picgo/master/20200221161119.png" alt="" loading="lazy"><br>
In the folder <code>scr</code>, <code>electron_vue</code> and <code>vuetify</code> have already created several files and folders for you. They seems intimidating. But don't worry. Once you get the gist of the ``electron<code>and</code>vue` framework, you will understand that they are only there to do some dirty underground construction work for you and help you to keep your codes clean.<br>
So here is the basic story line:</p>
<h2 id="1-backgroundjs">1. <code>background.js</code></h2>
<p><code>electron_vue</code> created a <code>background.js</code> file by which some basic tools from <code>electron</code> are imported to render the app main window for you for now. The main process of the app is run with the <code>background.js</code>. The file basically defines a main window of the app named <code>win</code>, and the actions to take when the app is <code>activate</code>, <code>ready</code> and <code>all the windows are closed</code>.</p>
<ul>
<li><code>activate</code> is used only for macOS when the dock icon is clicked and no other windows of app are open.<pre><code class="language-javascript">  app.on('activate', () =&gt; {
      if (win === null) {
          createWindow();
      }
  })
</code></pre>
</li>
<li><code>ready</code> is when electron has finished initialization and ready to create browser windows.<pre><code class="language-javascript">  app.on('ready', async () =&gt; {
      if (isDevelopment &amp;&amp; !process.env.IS_TEST) {
              BrowserWindow.addDevToolsExtension('node_modules/vue-devtools/vender')
      }
      createWindow()
  })
</code></pre>
</li>
<li><code>all the windows are closed</code> is when all the windows of app are closed.<pre><code class="language-javascript">app.on('window-all-closed', () =&gt; {
      if (process.platform !== 'darwin') {
          app.quit()
      }
  })
</code></pre>
</li>
</ul>
<p>In addition, both <code>activate</code> and <code>ready</code> actions will call the function <code>createWindow</code>.</p>
<pre><code class="language-javascript">function createWindow () {
  win = new BrowserWindow({ width: 800, height: 600, webPreferences: {
    nodeIntegration: true
  } })
  win.setMenu( null );
  if (process.env.WEBPACK_DEV_SERVER_URL) {
    // Load the url of the dev server if in development mode
    win.loadURL(process.env.WEBPACK_DEV_SERVER_URL)
    if (!process.env.IS_TEST) win.webContents.openDevTools()
  } else {
    createProtocol('app')
    // Load the index.html when not in development
    win.loadURL('app://./index.html')
  }
  win.on('closed', () =&gt; {
    win = null  
  })
}
</code></pre>
<p>Basically, this function declears an instance of <code>BrowserWindow</code> to the <code>win</code> as the main window, and setup some properties of this window, such as:</p>
<ul>
<li>the <code>width</code> and <code>height</code> when the window is initialized,</li>
<li>whether to show the dev-tools of the chromium during the development</li>
<li>whether to used the Node.js resources,</li>
<li><strong>most important of all</strong>, it links the <code>index.html</code> in the &quot;public&quot; folder as the content of this window by <code>win.loadURL('app://./index.html')</code>.</li>
</ul>
<h2 id="2-indexhtml">2. <code>index.html</code></h2>
<p>The <code>index.html</code> in the &quot;public&quot; folder is the entry point of your electron app. When the app is initialized in the <code>background.js</code>, the <code>creatWindow</code> function will load the <code>index.html</code> in as the content of the app.<br>
The only important thing in the codes of <code>index.html</code> that keeps our storyline continuous is the line 16, <code>&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</code>. It inserts a div with id <code>app</code> in the html body. Let's remember this line and keep on moving.</p>
<h2 id="3-mainjs">3. <code>main.js</code></h2>
<p>This file is a goodbye to <code>electron</code> and hello to <code>vue.js</code>. The file imports the <code>vue</code> and its plugins, declears a <code>vue instance</code> and mounts it to the div with id of <code>app</code>. Remember it? the div in the <code>index.html</code>.<br>
The file also import a file named <code>App.vue</code> which is the fundmental vue component that every components and views you build later on will add onto it.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Let's wrap it up. <code>Electron</code> uses the <code>background.js</code> to tell the OS what kind of windows your app will initialize. The <code>background.js</code> tells the OS that whatever in that <code>index.html</code> will be shown in its main window. The <code>index.html</code> displays a div named <code>app</code> in its body rendered by the <code>main.js</code>. The <code>main.js</code> uses <code>vue</code> and its little minions <code>router</code>, <code>store</code> and <code>vuetify</code> to render the component named <code>App</code> and that is what <code>index.html</code> will get.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VSCode Shortcuts & Extensions]]></title>
        <id>https://yuanzh0u.github.io/post/vscode-intro/</id>
        <link href="https://yuanzh0u.github.io/post/vscode-intro/">
        </link>
        <updated>2020-02-20T12:12:41.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="what-is-vscode">What is VSCode</h2>
<p><a href="https://code.visualstudio.com/">VSCode</a> is short for Visual Studio Code, which is brought by Microsoft and developed based on Electron and Javascript. It is a lightweight source code eidtor which could run on desktop with Windows, macOS and Linux OS systems. It could become a powerful IDE( Integrated Development Environment) tool with few pulgins (or extensions).<br>
And most important, it is free.</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="what-is-vscode">What is VSCode</h2>
<p><a href="https://code.visualstudio.com/">VSCode</a> is short for Visual Studio Code, which is brought by Microsoft and developed based on Electron and Javascript. It is a lightweight source code eidtor which could run on desktop with Windows, macOS and Linux OS systems. It could become a powerful IDE( Integrated Development Environment) tool with few pulgins (or extensions).<br>
And most important, it is free.</p>
<!-- more -->
<h2 id="top-10-keyboard-shortcuts">Top 10 Keyboard Shortcuts</h2>
<ol>
<li><code>Ctrl + Shift + P</code> or <code>F1</code> Open the command panel</li>
<li><code>Ctrl + P</code> Open the recent files, <code>Ctrl + Tab</code> switch among opened files.</li>
<li><code>Ctrl + Backspace</code> Delete previous word</li>
<li><code>Alt+ up/down</code> Move line up/down</li>
<li><code>Ctrl + Shift + D</code> Duplicate line</li>
<li><code>Ctrl + Shift + K</code> Delete line</li>
<li><code>Ctrl + [ or ]</code> Indent or outdent line</li>
<li><code>Ctrl + Shift + L</code> Select all occurrences of the current selection</li>
<li><code>Alt + Click</code> Multi lines select</li>
<li><code>Alt + Shift + Click</code> Multi column select<br>
<img src="https://raw.githubusercontent.com/yuanzh0u/Imgbed_picgo/master/20200222134050.png" alt="Keyboard Shortcuts Sheet of VSCode for Window Users" loading="lazy"></li>
</ol>
<h2 id="top-extensions-for-visual">Top Extensions for visual</h2>
<ol>
<li>Material Theme / Material Icon Theme</li>
<li>Bracket Pair Colorizer 2</li>
<li>indent-rainbow</li>
<li>Prettier &gt;useful feature:<code>Format on Save</code></li>
<li>Auto Rename Tag</li>
</ol>
<h2 id="top-extensions-for-python">Top Extensions for Python</h2>
<ol>
<li>Python</li>
<li>Python for VSCode</li>
<li>Python Indent</li>
<li>autoDocstring</li>
<li>MagicPython</li>
</ol>
<h2 id="top-extensions-for-web-coding">Top Extensions for Web Coding</h2>
<ol>
<li>REST Client ( test backend api )</li>
<li>Live Server (test frontend html )</li>
<li>Vetur (VS coding tools for Vue.js )</li>
<li>Remote Development</li>
<li>Docker</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day#2 Modify Initial Setup of Electron]]></title>
        <id>https://yuanzh0u.github.io/post/day2-modify-electron-initial-setup/</id>
        <link href="https://yuanzh0u.github.io/post/day2-modify-electron-initial-setup/">
        </link>
        <updated>2020-02-20T08:12:59.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="remove-the-menu-bar">Remove the Menu Bar</h2>
<p>When the project is setup by the <code>electron-builder</code> (a vue plugin), the initial settings of the electron window layout was put into the <code>background.js</code> at the root of the project folder.</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="remove-the-menu-bar">Remove the Menu Bar</h2>
<p>When the project is setup by the <code>electron-builder</code> (a vue plugin), the initial settings of the electron window layout was put into the <code>background.js</code> at the root of the project folder.</p>
<!-- more -->
<p>The main window of the app is given to an object named <code>win</code> at <code>line 19</code> by declearing an instance of BrowserWindow in the function of <code>createWindow(){}</code>.</p>
<pre><code class="language-javascript">function createWindow() { 
    win = new BrowserWindow({ width: 800, height: 600, webPreferences: {
        nodeIntegration: true
    } })
</code></pre>
<p>where <code>width</code> and <code>height</code> are the size of the window to be rendered, <code>webPreferences</code> is an object that most of the interactive properties of the window are setup.<br>
The line 23 to line 31 is a <code>if</code> statement that will decide where to load and how to render the window during the development mode and build mode.<br>
During the development mode, the dev tool float window will be opened just like in a chrome browser.<br>
Between line 21 and 23, we will add a line to disable the system menu bar from the window, so that we will add a more OS consistent menu bar in our app.</p>
<pre><code class="language-javascript">win.setMenu(null);
</code></pre>
<h2 id="add-vue-dev-tools-to-the-dev-tools-of-electron">Add Vue Dev-tools to the dev-tools of Electron</h2>
<p>The vue dev-tools is an chromium plugin which gives more structral and intuitive insight of the vue.js framework rather than other dev-tools consoles with plain javascript. Go to the root folder of the project in the terminal and type the following command to install the vue-devtools package to the <code>node_modules</code></p>
<pre><code class="language-shell">npm install vue-devtools --save-dev
</code></pre>
<p>and some scripts also need to be added to the <code>background.js</code> so that when the main window is rendered, the vue-devtools will be installed to the dev-tools of the chromium.<br>
The scripts will be add to the callback function in <code>add.on('ready', function(){})</code> as follows:</p>
<pre><code class="language-javascript">app.on('ready', async () =&gt; {
  if (isDevelopment &amp;&amp; !process.env.IS_TEST) {
    // Install Vue Devtools
    // Devtools extensions are broken in Electron 6.0.0 and greater
    // See https://github.com/nklayman/vue-cli-plugin-electron-builder/issues/378 for more info
    // Electron will not launch with Devtools extensions installed on Windows 10 with dark mode
    // If you are not using Windows 10 dark mode, you may uncomment these lines
    // In addition, if the linked issue is closed, you can upgrade electron and uncomment these lines
    // try {
    //   await installVueDevtools()
    // } catch (e) {
    //   console.error('Vue Devtools failed to install:', e.toString())
    // }
  }
  // new code start --&gt;
  if (process.env.NODE_ENV !== 'production') {
    BrowserWindow.addDevToolsExtension('node_modules/vue-devtools/vender')
  }
  // new code ends &lt;--
  createWindow()
})
</code></pre>
<p>Then use command <code>npm run electron:serve</code> at the root folder of the project in the terminal. After the codes are compiled successfully, a window will popup with vue-devtools in the dev-tools section.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Day#1 electron_vue installation]]></title>
        <id>https://yuanzh0u.github.io/post/day1-electron_vue-installation/</id>
        <link href="https://yuanzh0u.github.io/post/day1-electron_vue-installation/">
        </link>
        <updated>2020-02-19T13:50:34.000Z</updated>
        <summary type="html"><![CDATA[<p><code>electron_vue</code> is a very helpful plugin for <code>vue.js</code>. It enables to use powerful tools such as <code>electron</code> and <code>node.js</code> to develop crossplatform applications, and also utilize the web frameworks <code>vue.js</code> to accelerate GUI design and implementation in a morden and simple fashion.</p>
]]></summary>
        <content type="html"><![CDATA[<p><code>electron_vue</code> is a very helpful plugin for <code>vue.js</code>. It enables to use powerful tools such as <code>electron</code> and <code>node.js</code> to develop crossplatform applications, and also utilize the web frameworks <code>vue.js</code> to accelerate GUI design and implementation in a morden and simple fashion.</p>
<!-- more -->
<h2 id="install-nodejs">install node.js</h2>
<p>Go to the Node.js <a href="https://nodejs.org/en/download/">download</a> page. Download and Install the Current(Latest Features) 13.6.0 with npm (v.6.13.4). During the installation, select options such as <code>Node.js runtime</code>, <code>npm package manager</code>, <code>Add to PATH</code></p>
<h2 id="install-vue-cli-3">install vue cli 3</h2>
<p>Install vue cli 3 with a terminal console. cd to the root folder of the project and type the command...</p>
<pre><code class="language-shell">npm install -g @vue/cli
</code></pre>
<p>By which will install the source files of vue to the system, and ect.</p>
<h2 id="create-a-new-project">create a new project</h2>
<p>To create a new project underthe root folder of the project, type the command in a terminal console...</p>
<pre><code class="language-shell">vue create [project name]
</code></pre>
<p>and select the following options when asking...</p>
<pre><code class="language-shell">? Please pick a preset: {Manually select features}
? Check the features needed for your project: {Babel, Router, Vuex, Linter}
? Use history mode for router? (Requires proper server setup for index fallback in production) {Yes}
? Pick a linter / formatter config: {Basic}
? Pick additional lint features: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection {Lint on save}
? Where do you prefer placing config for Babel, ESLint, etc.? { In dedicated config files}
? Save this as a preset for future projects? {No}
</code></pre>
<h2 id="install-electron-support">Install electron support</h2>
<p>CD to the project folder in the terminal console, and type the command...</p>
<pre><code class="language-shell">vue add electron-builder
</code></pre>
<p>When asking the version of electron to install, select the newest one.<br>
After the vue-cli-plugin-electron-builder is successfully installed, you could type <code>npm run electron:serve</code> to render the electron app in dev-mode, and type <code>npm run electron:build</code> to build and publish the electron app.</p>
]]></content>
    </entry>
</feed>